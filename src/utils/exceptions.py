"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è Crypto News Analyzer.
–í–∫–ª—é—á–∞—é—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ–¥—ã –æ—à–∏–±–æ–∫ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.
"""

import sys
import traceback
from typing import Optional, Dict, Any, List
from enum import Enum
from datetime import datetime
import logging

"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–¥—ã –æ—à–∏–±–æ–∫ –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ.
–ó–∞–º–µ–Ω–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∫–ª–∞—Å—Å ErrorCode –≤ src/utils/exceptions.py
"""


class ErrorCode(Enum):
    """–ö–æ–¥—ã –æ—à–∏–±–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º."""

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (1000-1099)
    CONFIG_MISSING_ENV_VAR = 1001
    CONFIG_INVALID_VALUE = 1002
    CONFIG_FILE_NOT_FOUND = 1003
    CONFIG_PARSE_ERROR = 1004

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (1100-1199)
    DB_CONNECTION_FAILED = 1101
    DB_QUERY_FAILED = 1102
    DB_TRANSACTION_FAILED = 1103
    DB_SCHEMA_ERROR = 1104
    DB_TIMEOUT = 1105
    DB_CONSTRAINT_VIOLATION = 1106

    # Grok API (1200-1299)
    GROK_AUTH_FAILED = 1201
    GROK_RATE_LIMITED = 1202
    GROK_QUOTA_EXCEEDED = 1203
    GROK_INVALID_RESPONSE = 1204
    GROK_JSON_PARSE_ERROR = 1205
    GROK_MODEL_ERROR = 1206
    GROK_NETWORK_ERROR = 1207
    GROK_TIMEOUT = 1208  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
    GROK_CONNECTION_ERROR = 1209  # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –¥–ª—è –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

    # Telegram (1300-1399)
    TELEGRAM_AUTH_FAILED = 1301
    TELEGRAM_CHAT_NOT_FOUND = 1302
    TELEGRAM_MESSAGE_TOO_LONG = 1303
    TELEGRAM_RATE_LIMITED = 1304
    TELEGRAM_BOT_BLOCKED = 1305
    TELEGRAM_NETWORK_ERROR = 1306
    TELEGRAM_TIMEOUT = 1307  # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –¥–ª—è —Ç–∞–π–º–∞—É—Ç–æ–≤ Telegram

    # –í–∞–ª–∏–¥–∞—Ü–∏—è (1400-1499)
    VALIDATION_INVALID_DATA = 1401
    VALIDATION_MISSING_FIELD = 1402
    VALIDATION_TYPE_ERROR = 1403
    VALIDATION_RANGE_ERROR = 1404

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ (1500-1599)
    PROCESSING_INSUFFICIENT_DATA = 1501
    PROCESSING_TIMEOUT = 1502
    PROCESSING_MEMORY_ERROR = 1503
    PROCESSING_THREAD_ERROR = 1504

    # –û–±—â–∏–µ –æ—à–∏–±–∫–∏ (1900-1999)
    UNKNOWN_ERROR = 1999


class ErrorSeverity(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –æ—à–∏–±–æ–∫."""

    LOW = "low"          # –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏, —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É
    MEDIUM = "medium"    # –£–º–µ—Ä–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏, —á–∞—Å—Ç–∏—á–Ω–∞—è –ø–æ—Ç–µ—Ä—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    HIGH = "high"        # –°–µ—Ä—å–µ–∑–Ω—ã–µ –æ—à–∏–±–∫–∏, –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ—Ç–µ—Ä—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    CRITICAL = "critical"  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –ø–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã


class CryptoAnalyzerError(Exception):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é.

    Attributes:
        code: –ö–æ–¥ –æ—à–∏–±–∫–∏ –∏–∑ ErrorCode
        severity: –£—Ä–æ–≤–µ–Ω—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏
        context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        original_error: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        timestamp: –í—Ä–µ–º—è –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏
        suggestions: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        retry_possible: –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
    """

    def __init__(
        self,
        message: str,
        code: ErrorCode = ErrorCode.UNKNOWN_ERROR,
        severity: ErrorSeverity = ErrorSeverity.MEDIUM,
        context: Optional[Dict[str, Any]] = None,
        original_error: Optional[Exception] = None,
        suggestions: Optional[List[str]] = None,
        retry_possible: bool = False
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.

        Args:
            message: –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            code: –ö–æ–¥ –æ—à–∏–±–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
            severity: –£—Ä–æ–≤–µ–Ω—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            original_error: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            suggestions: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
            retry_possible: –ú–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
        """
        super().__init__(message)

        self.code = code
        self.severity = severity
        self.context = context or {}
        self.original_error = original_error
        self.timestamp = datetime.now()
        self.suggestions = suggestions or []
        self.retry_possible = retry_possible

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–µ –æ—à–∏–±–∫–∏
        self.traceback_info = self._get_traceback_info()

    def _get_traceback_info(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–µ —Å—Ç–µ–∫–∞."""
        frame = sys._getframe(2)  # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ 2 —É—Ä–æ–≤–Ω—è –≤—ã—à–µ
        return {
            'filename': frame.f_code.co_filename,
            'function': frame.f_code.co_name,
            'line_number': frame.f_lineno
        }

    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        return {
            'error_type': self.__class__.__name__,
            'message': str(self),
            'code': self.code.value,
            'code_name': self.code.name,
            'severity': self.severity.value,
            'timestamp': self.timestamp.isoformat(),
            'context': self.context,
            'suggestions': self.suggestions,
            'retry_possible': self.retry_possible,
            'traceback': {
                'filename': self.traceback_info['filename'],
                'function': self.traceback_info['function'],
                'line_number': self.traceback_info['line_number']
            },
            'original_error': str(self.original_error) if self.original_error else None
        }

    def log_error(self, logger: logging.Logger) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""
        error_dict = self.to_dict()

        log_message = (
            f"[{self.code.name}] {str(self)} "
            f"(Severity: {self.severity.value})"
        )

        if self.severity == ErrorSeverity.CRITICAL:
            logger.critical(log_message, extra={'error_details': error_dict})
        elif self.severity == ErrorSeverity.HIGH:
            logger.error(log_message, extra={'error_details': error_dict})
        elif self.severity == ErrorSeverity.MEDIUM:
            logger.warning(log_message, extra={'error_details': error_dict})
        else:
            logger.info(log_message, extra={'error_details': error_dict})

    def get_user_message(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ."""
        base_message = str(self)

        if self.suggestions:
            suggestions_text = "\n".join([f"‚Ä¢ {s}" for s in self.suggestions])
            base_message += f"\n\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:\n{suggestions_text}"

        if self.retry_possible:
            base_message += "\n\nüîÑ –û–ø–µ—Ä–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å."

        return base_message

    def __str__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏."""
        base_str = super().__str__()
        return f"{base_str} [Code: {self.code.value}]"


class ConfigError(CryptoAnalyzerError):
    """–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏."""

    def __init__(
        self,
        message: str,
        code: ErrorCode = ErrorCode.CONFIG_INVALID_VALUE,
        missing_vars: Optional[List[str]] = None,
        invalid_values: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            code: –ö–æ–¥ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            missing_vars: –°–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            invalid_values: –°–ª–æ–≤–∞—Ä—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        """
        context = kwargs.get('context', {})
        suggestions = kwargs.get('suggestions', [])

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if missing_vars:
            context['missing_variables'] = missing_vars
            suggestions.extend([
                f"–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é {var} –≤ .env —Ñ–∞–π–ª" for var in missing_vars
            ])
            suggestions.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª config/.env.example –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞")

        if invalid_values:
            context['invalid_values'] = invalid_values
            suggestions.extend([
                f"–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ {key}: {value}" for key, value in invalid_values.items()
            ])

        kwargs.update({
            'code': code,
            'severity': ErrorSeverity.HIGH,
            'context': context,
            'suggestions': suggestions,
            'retry_possible': True
        })

        super().__init__(message, **kwargs)


class DatabaseError(CryptoAnalyzerError):
    """–û—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""

    def __init__(
        self,
        message: str,
        code: ErrorCode = ErrorCode.DB_CONNECTION_FAILED,
        query: Optional[str] = None,
        params: Optional[tuple] = None,
        connection_info: Optional[Dict[str, Any]] = None,
        **kwargs
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            code: –ö–æ–¥ –æ—à–∏–±–∫–∏ –ë–î
            query: SQL –∑–∞–ø—Ä–æ—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            connection_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        """
        context = kwargs.get('context', {})
        suggestions = kwargs.get('suggestions', [])

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if query:
            context['query'] = query[:200] + '...' if len(query) > 200 else query
        if params:
            context['params'] = str(params)[:100] + '...' if len(str(params)) > 100 else str(params)
        if connection_info:
            context['connection'] = connection_info

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∫–æ–¥—É –æ—à–∏–±–∫–∏
        if code == ErrorCode.DB_CONNECTION_FAILED:
            suggestions.extend([
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ MySQL —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω",
                "–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ .env",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç 3306 –¥–æ—Å—Ç—É–ø–µ–Ω"
            ])
        elif code == ErrorCode.DB_QUERY_FAILED:
            suggestions.extend([
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å SQL –∑–∞–ø—Ä–æ—Å–∞",
                "–£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü –∏ —Å—Ç–æ–ª–±—Ü–æ–≤",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
            ])
        elif code == ErrorCode.DB_TIMEOUT:
            suggestions.extend([
                "–£–≤–µ–ª–∏—á—å—Ç–µ timeout –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Ä–≤–µ—Ä–∞ –ë–î"
            ])

        kwargs.update({
            'code': code,
            'severity': ErrorSeverity.HIGH,
            'context': context,
            'suggestions': suggestions,
            'retry_possible': code != ErrorCode.DB_SCHEMA_ERROR
        })

        super().__init__(message, **kwargs)


class GrokAPIError(CryptoAnalyzerError):
    """–û—à–∏–±–∫–∏ Grok API —Å –∞–Ω–∞–ª–∏–∑–æ–º –æ—Ç–≤–µ—Ç–æ–≤."""

    def __init__(
        self,
        message: str,
        code: ErrorCode = ErrorCode.GROK_INVALID_RESPONSE,
        status_code: Optional[int] = None,
        response_data: Optional[Dict[str, Any]] = None,
        request_data: Optional[Dict[str, Any]] = None,
        **kwargs
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–∫–∏ Grok API.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            code: –ö–æ–¥ –æ—à–∏–±–∫–∏ API
            status_code: HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥
            response_data: –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ API
            request_data: –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        """
        context = kwargs.get('context', {})
        suggestions = kwargs.get('suggestions', [])

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ/–æ—Ç–≤–µ—Ç–µ
        if status_code:
            context['http_status'] = status_code
        if response_data:
            context['response'] = str(response_data)[:500] + '...' if len(str(response_data)) > 500 else response_data
        if request_data:
            # –°–∫—Ä—ã–≤–∞–µ–º API –∫–ª—é—á –≤ –ª–æ–≥–∞—Ö
            safe_request = request_data.copy()
            if 'api_key' in safe_request:
                safe_request['api_key'] = '***HIDDEN***'
            context['request'] = safe_request

        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∫–æ–¥–∞–º –æ—à–∏–±–æ–∫
        if code == ErrorCode.GROK_AUTH_FAILED:
            suggestions.extend([
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å XAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ",
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –∫–ª—é—á –Ω–µ –∏—Å—Ç–µ–∫",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ console.x.ai"
            ])
        elif code == ErrorCode.GROK_RATE_LIMITED:
            suggestions.extend([
                "–£–º–µ–Ω—å—à–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API",
                "–†–µ–∞–ª–∏–∑—É–π—Ç–µ exponential backoff",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã –Ω–∞ console.x.ai"
            ])
        elif code == ErrorCode.GROK_QUOTA_EXCEEDED:
            suggestions.extend([
                "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤ xAI",
                "–£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"
            ])
        elif code == ErrorCode.GROK_JSON_PARSE_ERROR:
            suggestions.extend([
                "–û–±–Ω–æ–≤–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏—è –∫ JSON",
                "–î–æ–±–∞–≤—å—Ç–µ response_format: json_object –≤ –∑–∞–ø—Ä–æ—Å",
                "–†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ JSON –∏–∑ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"
            ])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–∞
        retry_possible = code in [
            ErrorCode.GROK_RATE_LIMITED,
            ErrorCode.GROK_NETWORK_ERROR,
            ErrorCode.GROK_TIMEOUT
        ]

        kwargs.update({
            'code': code,
            'severity': ErrorSeverity.MEDIUM if retry_possible else ErrorSeverity.HIGH,
            'context': context,
            'suggestions': suggestions,
            'retry_possible': retry_possible
        })

        super().__init__(message, **kwargs)


class TelegramError(CryptoAnalyzerError):
    """–û—à–∏–±–∫–∏ Telegram API —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π."""

    def __init__(
        self,
        message: str,
        code: ErrorCode = ErrorCode.TELEGRAM_NETWORK_ERROR,
        telegram_error_code: Optional[int] = None,
        chat_info: Optional[Dict[str, Any]] = None,
        **kwargs
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–∫–∏ Telegram.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            code: –ö–æ–¥ –æ—à–∏–±–∫–∏ Telegram
            telegram_error_code: –ö–æ–¥ –æ—à–∏–±–∫–∏ –æ—Ç Telegram API
            chat_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ
        """
        context = kwargs.get('context', {})
        suggestions = kwargs.get('suggestions', [])

        # –î–æ–±–∞–≤–ª—è–µ–º Telegram-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if telegram_error_code:
            context['telegram_error_code'] = telegram_error_code
        if chat_info:
            context['chat_info'] = chat_info

        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∫–æ–¥–∞–º –æ—à–∏–±–æ–∫
        if code == ErrorCode.TELEGRAM_AUTH_FAILED:
            suggestions.extend([
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å TELEGRAM_BOT_TOKEN",
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
                "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather"
            ])
        elif code == ErrorCode.TELEGRAM_CHAT_NOT_FOUND:
            suggestions.extend([
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å TELEGRAM_CHANNEL_ID",
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"
            ])
        elif code == ErrorCode.TELEGRAM_MESSAGE_TOO_LONG:
            suggestions.extend([
                "–†–∞–∑–±–µ–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π",
                "–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–≤–∏—Ç–æ–≤",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"
            ])
        elif code == ErrorCode.TELEGRAM_BOT_BLOCKED:
            suggestions.extend([
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞",
                "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω"
            ])

        kwargs.update({
            'code': code,
            'severity': ErrorSeverity.MEDIUM,
            'context': context,
            'suggestions': suggestions,
            'retry_possible': code != ErrorCode.TELEGRAM_BOT_BLOCKED
        })

        super().__init__(message, **kwargs)


class ValidationError(CryptoAnalyzerError):
    """–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""

    def __init__(
        self,
        message: str,
        code: ErrorCode = ErrorCode.VALIDATION_INVALID_DATA,
        field_name: Optional[str] = None,
        invalid_value: Optional[Any] = None,
        expected_type: Optional[type] = None,
        **kwargs
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            code: –ö–æ–¥ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            field_name: –ò–º—è –ø–æ–ª—è —Å –æ—à–∏–±–∫–æ–π
            invalid_value: –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            expected_type: –û–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
        """
        context = kwargs.get('context', {})
        suggestions = kwargs.get('suggestions', [])

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if field_name:
            context['field_name'] = field_name
        if invalid_value is not None:
            context['invalid_value'] = str(invalid_value)[:100]
        if expected_type:
            context['expected_type'] = expected_type.__name__

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if field_name and expected_type:
            suggestions.append(f"–ü–æ–ª–µ '{field_name}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–∏–ø–∞ {expected_type.__name__}")
        if invalid_value is not None:
            suggestions.append(f"–ü–æ–ª—É—á–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: {invalid_value}")

        kwargs.update({
            'code': code,
            'severity': ErrorSeverity.LOW,
            'context': context,
            'suggestions': suggestions,
            'retry_possible': True
        })

        super().__init__(message, **kwargs)


class ProcessingError(CryptoAnalyzerError):
    """–û—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""

    def __init__(
        self,
        message: str,
        code: ErrorCode = ErrorCode.PROCESSING_TIMEOUT,
        processing_time: Optional[float] = None,
        data_size: Optional[int] = None,
        memory_usage: Optional[int] = None,
        **kwargs
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            code: –ö–æ–¥ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_time: –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            data_size: –†–∞–∑–º–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            memory_usage: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –±–∞–π—Ç–∞—Ö
        """
        context = kwargs.get('context', {})
        suggestions = kwargs.get('suggestions', [])

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if processing_time is not None:
            context['processing_time_seconds'] = processing_time
        if data_size is not None:
            context['data_size'] = data_size
        if memory_usage is not None:
            context['memory_usage_bytes'] = memory_usage

        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        if code == ErrorCode.PROCESSING_TIMEOUT:
            suggestions.extend([
                "–£–≤–µ–ª–∏—á—å—Ç–µ timeout –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                "–†–∞–∑–±–µ–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –º–µ–Ω—å—à–∏–µ –±–∞—Ç—á–∏",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            ])
        elif code == ErrorCode.PROCESSING_MEMORY_ERROR:
            suggestions.extend([
                "–£–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–∞–Ω–Ω—ã—Ö",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–æ–≤",
                "–û—á–∏—â–∞–π—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã"
            ])
        elif code == ErrorCode.PROCESSING_INSUFFICIENT_DATA:
            suggestions.extend([
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
                "–£–≤–µ–ª–∏—á—å—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥ --force –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"
            ])

        kwargs.update({
            'code': code,
            'severity': ErrorSeverity.MEDIUM,
            'context': context,
            'suggestions': suggestions,
            'retry_possible': code != ErrorCode.PROCESSING_MEMORY_ERROR
        })

        super().__init__(message, **kwargs)


# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
def handle_exception(
    error: Exception,
    logger: logging.Logger,
    context: Optional[Dict[str, Any]] = None
) -> CryptoAnalyzerError:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—ã—á–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ CryptoAnalyzerError.

    Args:
        error: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–∫–∏
        context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç

    Returns:
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ CryptoAnalyzerError
    """
    if isinstance(error, CryptoAnalyzerError):
        error.log_error(logger)
        return error

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    if isinstance(error, ValueError):
        converted = ValidationError(
            str(error),
            code=ErrorCode.VALIDATION_INVALID_DATA,
            original_error=error,
            context=context
        )
    elif isinstance(error, ConnectionError):
        converted = DatabaseError(
            str(error),
            code=ErrorCode.DB_CONNECTION_FAILED,
            original_error=error,
            context=context
        )
    elif isinstance(error, TimeoutError):
        converted = ProcessingError(
            str(error),
            code=ErrorCode.PROCESSING_TIMEOUT,
            original_error=error,
            context=context
        )
    else:
        converted = CryptoAnalyzerError(
            str(error),
            code=ErrorCode.UNKNOWN_ERROR,
            original_error=error,
            context=context
        )

    converted.log_error(logger)
    return converted


def create_error_summary(errors: List[CryptoAnalyzerError]) -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –æ—à–∏–±–∫–∞–º –¥–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏.

    Args:
        errors: –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫

    Returns:
        –°–≤–æ–¥–∫–∞ –ø–æ –æ—à–∏–±–∫–∞–º
    """
    if not errors:
        return {"total": 0, "by_severity": {}, "by_code": {}, "retry_possible": 0}

    summary = {
        "total": len(errors),
        "by_severity": {},
        "by_code": {},
        "retry_possible": sum(1 for e in errors if e.retry_possible),
        "timespan": {
            "first_error": min(e.timestamp for e in errors).isoformat(),
            "last_error": max(e.timestamp for e in errors).isoformat()
        }
    }

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
    for error in errors:
        severity = error.severity.value
        summary["by_severity"][severity] = summary["by_severity"].get(severity, 0) + 1

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–¥–∞–º
    for error in errors:
        code = error.code.name
        summary["by_code"][code] = summary["by_code"].get(code, 0) + 1

    return summary