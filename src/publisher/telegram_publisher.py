"""
–ü—É–±–ª–∏–∫–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ Telegram.
"""

import asyncio
from typing import List, Dict, Tuple

import telegram
from telegram.error import TelegramError

from ..config.config_manager import TelegramConfig
from ..database.models import Tweet, TweetAnalysis, TweetType
from ..utils.exceptions import TelegramError as CustomTelegramError
from ..utils.logger import get_logger


class TelegramPublisher:
    """–ü—É–±–ª–∏–∫–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Telegram."""

    MAX_MESSAGE_LENGTH = 4096

    def __init__(self, config: TelegramConfig) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞ Telegram.

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
        """
        self.config = config
        self.logger = get_logger(__name__)

        self.bot = telegram.Bot(token=config.bot_token)
        self.emojis = self._get_emoji_mapping()
        self.categories = self._get_categories()

    def _get_emoji_mapping(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ —ç–º–æ–¥–∑–∏."""
        return {
            # –û–±—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            "–ù–æ–≤–æ—Å—Ç–∏": "üì¢",
            "–°–ª—É—Ö–∏": "‚ùì",
            "–∏–Ω—Å–∞–π–¥—ã": "üîç",
            "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑": "üìä",
            "—Ç–æ—Ä–≥–æ–≤—ã–µ –∏–¥–µ–∏": "üí∞",
            "–ø—Ä–æ–≥–Ω–æ–∑—ã": "üîÆ",
            "–æ–±—É—á–µ–Ω–∏–µ": "üìö",
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏
            "—Ä–æ—Å—Ç": "üìà",
            "–ø–∞–¥–µ–Ω–∏–µ": "üìâ",
            "–±–∏—Ç–∫–æ–∏–Ω": "‚Çø",
            "btc": "‚Çø",
            "bitcoin": "‚Çø",
            "ethereum": "Œû",
            "eth": "Œû",
            "–ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ": "ü§ù",
            "–∑–∞–ø—É—Å–∫": "üöÄ",
            "–ª–∏—Å—Ç–∏–Ω–≥": "üìã",
            "—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ": "‚öñÔ∏è",
            "–≤–∑–ª–æ–º": "üîì",
            "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": "üîí",
            "–∑–∞–∫–æ–Ω": "üìú",
            "—Å—É–¥": "‚öñÔ∏è",
            "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ": "‚ö†Ô∏è",
            "–æ–ø–∞—Å–Ω–æ—Å—Ç—å": "üö®",
            "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": "üíµ",
            "–¥–æ—Ö–æ–¥": "üí∏",
            "–∫–æ—à–µ–ª–µ–∫": "üëõ",
            "–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è": "‚ú®",
            "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": "üîÑ",
            "—É—Å–ø–µ—Ö": "‚úÖ",
            "–ø—Ä–æ–≤–∞–ª": "‚ùå",
            "–≤–Ω–∏–º–∞–Ω–∏–µ": "üëÄ",
            "–≤–∞–∂–Ω–æ": "‚ÄºÔ∏è",
            "–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏": "üí°",
            "–ø–ª–∞—Ç–µ–∂–∏": "üí≥",
            "nft": "üñºÔ∏è",
            "defi": "üè¶",
            "–º–∞–π–Ω–∏–Ω–≥": "‚õèÔ∏è",
            "staking": "ü•©",
            "–∫–æ–º–∏—Å—Å–∏—è": "üí≤",
            "—Ö–∞–ª–≤–∏–Ω–≥": "‚úÇÔ∏è",
            "—Ç–æ–∫–µ–Ω": "ü™ô",
            "–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å": "üíß",
            "–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å": "üé¢"
        }

    def _get_categories(self) -> List[Tuple[str, List[str], str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏."""
        return [
            ("üì∞ –ù–æ–≤–æ—Å—Ç–∏", [TweetType.TRUE_NEWS.value], "–ù–æ–≤–æ—Å—Ç–∏"),
            ("üó£Ô∏è –°–ª—É—Ö–∏", [TweetType.FAKE_NEWS.value], "–°–ª—É—Ö–∏"),
            ("üîç –ò–Ω—Å–∞–π–¥", [TweetType.INSIDE.value], "–∏–Ω—Å–∞–π–¥—ã"),
            ("üìö –£—á–µ–±–∞", [TweetType.TUTORIAL.value], "–æ–±—É—á–µ–Ω–∏–µ"),
            ("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ç—Ä–µ–π–¥–∏–Ω–≥", [TweetType.ANALYTICS.value, TweetType.TRADING.value], "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"),
            ("üåê –î—Ä—É–≥–æ–µ", [TweetType.OTHERS.value], "–î—Ä—É–≥–æ–µ")
        ]

    def _escape_markdown_v2(self, text: str) -> str:
        """
        –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown V2.

        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç

        Returns:
            –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        reserved_chars = r'_*[]()~`>#-+=|{.}!'
        for char in reserved_chars:
            text = text.replace(char, f'\\{char}')
        return text

    def _get_emoji_for_content(self, title: str, description: str, category_emoji: str) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.

        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫
            description: –û–ø–∏—Å–∞–Ω–∏–µ
            category_emoji: –ë–∞–∑–æ–≤—ã–π —ç–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        Returns:
            –ü–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏
        """
        combined_text = (title + " " + description).lower()

        # –ò—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏, –∏—Å–∫–ª—é—á–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ
        excluded_keys = [
            "–ù–æ–≤–æ—Å—Ç–∏", "–°–ª—É—Ö–∏", "–∏–Ω—Å–∞–π–¥—ã", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
            "—Ç–æ—Ä–≥–æ–≤—ã–µ –∏–¥–µ–∏", "–ø—Ä–æ–≥–Ω–æ–∑—ã", "–æ–±—É—á–µ–Ω–∏–µ"
        ]

        for key, emoji in self.emojis.items():
            if key in combined_text and key not in excluded_keys:
                return emoji

        return category_emoji

    def _filter_valuable_tweets(self, tweets: List[Tweet], results: List[TweetAnalysis]) -> List[Tuple[Tweet, TweetAnalysis]]:
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ü–µ–Ω–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.

        Args:
            tweets: –°–ø–∏—Å–æ–∫ —Ç–≤–∏—Ç–æ–≤
            results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            –°–ø–∏—Å–æ–∫ –ø–∞—Ä (—Ç–≤–∏—Ç, –∞–Ω–∞–ª–∏–∑) –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        valuable_items = []

        for tweet, analysis in zip(tweets, results):
            if analysis.is_valuable:
                valuable_items.append((tweet, analysis))

        self.logger.info(f"Found {len(valuable_items)} valuable tweets out of {len(tweets)}")
        return valuable_items

    def _group_by_categories(self, items: List[Tuple[Tweet, TweetAnalysis]]) -> Dict[str, List[Tuple[Tweet, TweetAnalysis]]]:
        """
        –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.

        Args:
            items: –°–ø–∏—Å–æ–∫ –ø–∞—Ä (—Ç–≤–∏—Ç, –∞–Ω–∞–ª–∏–∑)

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        """
        grouped = {}

        for category_name, category_types, _ in self.categories:
            category_items = [
                (tweet, analysis) for tweet, analysis in items
                if analysis.type in category_types
            ]
            if category_items:
                grouped[category_name] = category_items

        return grouped

    def _format_message_content(self, grouped_items: Dict[str, List[Tuple[Tweet, TweetAnalysis]]]) -> List[str]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π.

        Args:
            grouped_items: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã

        Returns:
            –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        content = ["*–ö—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑ —Ç–≤–∏—Ç–æ–≤* üåü\n"]

        for category_name, category_types, category_emoji_key in self.categories:
            if category_name not in grouped_items:
                continue

            content.append(f"*{category_name}*\n")

            for tweet, analysis in grouped_items[category_name]:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã
                title = self._escape_markdown_v2(analysis.title)
                description = self._escape_markdown_v2(analysis.description)
                url = self._escape_markdown_v2(tweet.url)

                # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏
                base_emoji = self.emojis.get(category_emoji_key, "üì¢")
                emoji = self._get_emoji_for_content(analysis.title, analysis.description, base_emoji)

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–≤–∏—Ç–∞
                tweet_text = f"*{title} {emoji}*\n{description}\n[–ò—Å—Ç–æ—á–Ω–∏–∫]({url})\n"
                content.append(tweet_text)

            content.append("\n")

        return content

    def _split_into_messages(self, content: List[str]) -> List[str]:
        """
        –†–∞–∑–±–∏–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–∞ Telegram.

        Args:
            content: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

        Returns:
            –°–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        messages = []
        current_message = ["*–ö—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑ —Ç–≤–∏—Ç–æ–≤* üåü\n"]
        current_length = len(current_message[0])

        for line in content[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            line_length = len(line)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if current_length + line_length > self.MAX_MESSAGE_LENGTH:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if len(current_message) > 1:  # –ï—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    messages.append("".join(current_message))

                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                current_message = []
                current_length = 0

                # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–µ–≥–æ
                if line.startswith("*") and not line.startswith("*–ö—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑"):
                    current_message.append(line)
                    current_length = line_length
                else:
                    # –î–ª—è —Ç–≤–∏—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    if current_message:  # –£–∂–µ –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        current_message.append(line)
                        current_length += line_length
                    else:
                        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–≤–∏—Ç
                        header = "*–ö—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑ —Ç–≤–∏—Ç–æ–≤* üåü\n"
                        current_message.append(header)
                        current_message.append(line)
                        current_length = len(header) + line_length
            else:
                current_message.append(line)
                current_length += line_length

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(current_message) > 1:
            messages.append("".join(current_message))

        return messages

    async def publish_analysis(self, tweets: List[Tweet], results: List[TweetAnalysis]) -> None:
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ Telegram.

        Args:
            tweets: –°–ø–∏—Å–æ–∫ —Ç–≤–∏—Ç–æ–≤
            results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞

        Raises:
            CustomTelegramError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if len(tweets) != len(results):
            raise ValueError("Number of tweets and results must match")

        try:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ü–µ–Ω–Ω—ã–µ —Ç–≤–∏—Ç—ã
            valuable_items = self._filter_valuable_tweets(tweets, results)

            if not valuable_items:
                self.logger.info("No valuable tweets to publish")
                return

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            grouped_items = self._group_by_categories(valuable_items)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            content = self._format_message_content(grouped_items)

            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = self._split_into_messages(content)

            if not messages:
                self.logger.warning("No messages generated for publishing")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            await self._send_messages(messages)

        except Exception as e:
            self.logger.error(f"Error in publish_analysis: {e}")
            raise CustomTelegramError(f"Failed to publish analysis: {e}")

    async def _send_messages(self, messages: List[str]) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –∫–∞–Ω–∞–ª.

        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏

        Raises:
            CustomTelegramError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        successful_sends = 0

        for i, message in enumerate(messages, 1):
            try:
                await self.bot.send_message(
                    chat_id=self.config.channel_id,
                    text=message,
                    parse_mode="MarkdownV2",
                    disable_web_page_preview=True
                )

                successful_sends += 1
                self.logger.info(f"Successfully sent message {i}/{len(messages)}")

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                if i < len(messages):
                    await asyncio.sleep(1)

            except TelegramError as e:
                self.logger.error(f"Failed to send message {i}/{len(messages)}: {e}")

                # –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                if "chat not found" in str(e).lower() or "bot was blocked" in str(e).lower():
                    raise CustomTelegramError(f"Critical Telegram error: {e}")

        if successful_sends == 0:
            raise CustomTelegramError("Failed to send any messages")

        self.logger.info(f"Successfully sent {successful_sends}/{len(messages)} messages")

    async def send_test_message(self) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.

        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            test_message = "*–¢–µ—Å—Ç –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞* üß™\n–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\\!"

            await self.bot.send_message(
                chat_id=self.config.channel_id,
                text=test_message,
                parse_mode="MarkdownV2"
            )

            self.logger.info("Test message sent successfully")
            return True

        except Exception as e:
            self.logger.error(f"Failed to send test message: {e}")
            return False

    async def get_bot_info(self) -> Dict[str, str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ.

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ
        """
        try:
            bot_info = await self.bot.get_me()
            return {
                "id": str(bot_info.id),
                "username": bot_info.username or "N/A",
                "first_name": bot_info.first_name or "N/A",
                "is_bot": str(bot_info.is_bot)
            }
        except Exception as e:
            self.logger.error(f"Failed to get bot info: {e}")
            return {}

    def format_statistics_message(self, stats: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π.

        Args:
            stats: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not stats:
            return "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞* ‚ùå"

        general = stats.get('general', {})
        by_type = stats.get('by_type', [])
        period = stats.get('period_hours', 24)

        message_parts = [
            f"*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period}—á*\n",
            f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {general.get('total_processed', 0)}",
            f"–¶–µ–Ω–Ω—ã—Ö: {general.get('valuable', 0)}",
            f"–°–ø–∞–º: {general.get('spam', 0)}",
            f"–®—É–º: {general.get('flood', 0)}",
            f"–î—É–±–ª–∏: {general.get('duplicates', 0)}\n"
        ]

        if by_type:
            message_parts.append("*–ü–æ —Ç–∏–ø–∞–º:*")
            for item in by_type[:5]:  # –¢–æ–ø 5
                type_name = item['type']
                count = item['count']
                message_parts.append(f"‚Ä¢ {type_name}: {count}")

        message = "\n".join(message_parts)
        return self._escape_markdown_v2(message)