"""
–ü—É–±–ª–∏–∫–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ Telegram.
"""

import asyncio
from typing import List, Dict
import telegram
from telegram.error import TelegramError


class TelegramPublisher:
    """–ü—É–±–ª–∏–∫–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Telegram."""

    MAX_MESSAGE_LENGTH = 4096

    def __init__(self, config) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞ Telegram."""
        self.config = config
        self.bot = telegram.Bot(token=config.bot_token)
        self.emojis = self._get_emoji_mapping()

    def _get_emoji_mapping(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ —ç–º–æ–¥–∑–∏."""
        return {
            "–ù–æ–≤–æ—Å—Ç–∏": "üì¢",
            "–±–∏—Ç–∫–æ–∏–Ω": "‚Çø",
            "bitcoin": "‚Çø",
            "ethereum": "Œû",
        }

    def _escape_markdown_v2(self, text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown V2."""
        reserved_chars = r'_*[]()~`>#-+=|{.}!'
        for char in reserved_chars:
            text = text.replace(char, f'\\{char}')
        return text

    async def publish_analysis(self, tweets: List, results: List) -> None:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ Telegram."""
        print(f"Publishing analysis of {len(tweets)} tweets to Telegram")
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é

    async def send_test_message(self) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        try:
            test_message = "*–¢–µ—Å—Ç –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞* üß™\\n–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç\!"

            await self.bot.send_message(
                chat_id=self.config.channel_id,
                text=test_message,
                parse_mode="MarkdownV2"
            )

            print("Test message sent successfully")
            return True

        except Exception as e:
            print(f"Failed to send test message: {e}")
            return False
