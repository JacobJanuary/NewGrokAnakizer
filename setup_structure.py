#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Crypto News Analyzer –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ PyCharm.
–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ –∏ –∑–∞–≥–æ—Ç–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
"""

import os
from pathlib import Path


class ProjectStructureSetup:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        self.base_path = Path.cwd()
        print(f"üèóÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Crypto News Analyzer")
        print(f"üìç –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.base_path.absolute()}")

    def create_directory_structure(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π."""
        directories = [
            "src", "src/config", "src/database", "src/analyzer", "src/publisher", "src/utils",
            "tests", "scripts", "docker", "config", "docs", "logs", ".idea"
        ]

        print(f"\nüèóÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:")

        for directory in directories:
            dir_path = self.base_path / directory
            dir_path.mkdir(parents=True, exist_ok=True)
            print(f"   üìÅ {directory}")

    def create_python_files(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ Python —Ñ–∞–π–ª–æ–≤ —Å –∑–∞–≥–æ—Ç–æ–≤–∫–∞–º–∏."""
        files = {
            "src/__init__.py": self.get_src_init(),
            "src/main.py": self.get_main_py(),
            "src/config/__init__.py": self.get_config_init(),
            "src/config/config_manager.py": self.get_config_manager(),
            "src/database/__init__.py": self.get_database_init(),
            "src/database/models.py": self.get_models(),
            "src/database/database_manager.py": self.get_database_manager(),
            "src/analyzer/__init__.py": self.get_analyzer_init(),
            "src/analyzer/grok_analyzer.py": self.get_grok_analyzer(),
            "src/publisher/__init__.py": self.get_publisher_init(),
            "src/publisher/telegram_publisher.py": self.get_telegram_publisher(),
            "src/utils/__init__.py": self.get_utils_init(),
            "src/utils/exceptions.py": self.get_exceptions(),
            "src/utils/logger.py": self.get_logger(),
            "tests/__init__.py": '"""–¢–µ—Å—Ç—ã –¥–ª—è Crypto News Analyzer."""',
            "tests/test_config.py": self.get_test_config(),
            "tests/test_database.py": self.get_test_database(),
            "tests/test_analyzer.py": self.get_test_analyzer(),
            "tests/test_publisher.py": self.get_test_publisher(),
            "scripts/monitoring.py": self.get_monitoring(),
            "scripts/setup_database.py": self.get_setup_database(),
            "scripts/run_tests.py": self.get_run_tests(),
        }

        print(f"\nüêç –°–æ–∑–¥–∞–Ω–∏–µ Python —Ñ–∞–π–ª–æ–≤:")

        for file_path, content in files.items():
            full_path = self.base_path / file_path
            full_path.write_text(content, encoding='utf-8')
            print(f"   üìÑ {file_path}")

    def create_config_files(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
        files = {
            "config/.env.example": self.get_env_example(),
            ".gitignore": self.get_gitignore(),
            "requirements.txt": self.get_requirements(),
            "requirements-dev.txt": self.get_requirements_dev(),
            "docker/Dockerfile": self.get_dockerfile(),
            "docker/docker-compose.yml": self.get_docker_compose(),
            "docker/init.sql": self.get_init_sql(),
            "setup.py": self.get_setup_py(),
            "pyproject.toml": self.get_pyproject_toml(),
            ".pre-commit-config.yaml": self.get_precommit(),
        }

        print(f"\n‚öôÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")

        for file_path, content in files.items():
            full_path = self.base_path / file_path
            full_path.write_text(content, encoding='utf-8')
            print(f"   üìÑ {file_path}")

    def create_documentation_files(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""
        files = {
            "README.md": self.get_readme(),
            "docs/DEPLOYMENT.md": self.get_deployment_doc(),
            "docs/API_REFERENCE.md": self.get_api_reference(),
            "PROJECT_STRUCTURE.md": self.get_project_structure(),
        }

        print(f"\nüìö –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:")

        for file_path, content in files.items():
            full_path = self.base_path / file_path
            full_path.write_text(content, encoding='utf-8')
            print(f"   üìÑ {file_path}")

    def create_pycharm_files(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ PyCharm."""
        files = {
            ".idea/misc.xml": self.get_pycharm_misc(),
            ".idea/modules.xml": self.get_pycharm_modules(),
            ".idea/crypto-news-analyzer.iml": self.get_pycharm_iml(),
            "logs/.gitkeep": "# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤\n",
        }

        print(f"\nüîß –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ PyCharm –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö:")

        for file_path, content in files.items():
            full_path = self.base_path / file_path
            full_path.parent.mkdir(parents=True, exist_ok=True)
            full_path.write_text(content, encoding='utf-8')
            print(f"   üìÑ {file_path}")

    def create_project_structure(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞."""
        try:
            self.create_directory_structure()
            self.create_python_files()
            self.create_config_files()
            self.create_documentation_files()
            self.create_pycharm_files()

            print(f"\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ Crypto News Analyzer —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            self.show_next_steps()

        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            raise

    def show_next_steps(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏."""
        print(f"\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print(f"   1. üì¶ pip install -r requirements.txt")
        print(f"   2. üì¶ pip install -r requirements-dev.txt")
        print(f"   3. ‚öôÔ∏è  cp config/.env.example .env")
        print(f"   4. ‚úèÔ∏è  # –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª")
        print(f"   5. üóÑÔ∏è  python scripts/setup_database.py --all")
        print(f"   6. üß™ python -m src.main --test")

        files_count = len(list(self.base_path.rglob("*"))) - len(list(self.base_path.rglob("*/")))
        print(f"\nüìä –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_count}")
        print(f"üöÄ –ì–æ—Ç–æ–≤–æ! –£–¥–∞—á–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ PyCharm! üéâ")

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤
    def get_src_init(self):
        return '''"""
Crypto News Analyzer - Automated crypto news analysis with Grok AI.
"""

__version__ = "1.0.0"
__author__ = "Your Name"
__email__ = "your.email@example.com"
'''

    def get_main_py(self):
        return '''"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å Crypto News Analyzer.
"""

import asyncio
import sys
from typing import Optional

# TODO: –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π
# from .config.config_manager import ConfigManager
# from .database.database_manager import DatabaseManager
# from .analyzer.grok_analyzer import GrokAnalyzer
# from .publisher.telegram_publisher import TelegramPublisher


class CryptoNewsAnalyzer:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–Ω–æ–≤–æ—Å—Ç–µ–π."""

    def __init__(self, config_file: Optional[str] = None) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞."""
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print("üöÄ CryptoNewsAnalyzer initialized")

    async def run_analysis(self, force_run: bool = False) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞."""
        print("üîç Starting crypto news analysis...")
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞

    async def test_components(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
        print("üß™ Testing components...")
        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        return True


async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞."""
    try:
        force_run = "--force" in sys.argv
        test_mode = "--test" in sys.argv

        analyzer = CryptoNewsAnalyzer()

        if test_mode:
            success = await analyzer.test_components()
            sys.exit(0 if success else 1)

        await analyzer.run_analysis(force_run=force_run)

    except Exception as e:
        print(f"‚ùå Error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
'''

    def get_config_init(self):
        return '''"""–ú–æ–¥—É–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""

# TODO: –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è config_manager.py
# from .config_manager import (
#     ConfigManager,
#     DatabaseConfig,
#     TelegramConfig,
#     GrokConfig,
#     AppConfig
# )

__all__ = []
'''

    def get_config_manager(self):
        return '''"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Crypto News Analyzer.
"""

import os
from dataclasses import dataclass
from typing import Optional
from dotenv import load_dotenv


@dataclass
class DatabaseConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    host: str
    user: str
    password: str
    database: str
    port: int = 3306


@dataclass
class TelegramConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram."""
    bot_token: str
    channel_id: str


@dataclass  
class GrokConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Grok API."""
    api_key: str
    model_name: str = "grok-3"
    base_url: str = "https://api.x.ai/v1"
    use_web_search: bool = True
    temperature: float = 0.1
    max_tokens: int = 10000


@dataclass
class AppConfig:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    tweet_fetch_hours: int = 8
    tweet_limit: int = 100
    min_tweets_threshold: int = 50
    log_level: str = "INFO"
    log_file: str = "logs/crypto_analyzer.log"


class ConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""

    def __init__(self, env_file: Optional[str] = None) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        load_dotenv(env_file)
        self._validate_environment()

    def _validate_environment(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        required_vars = [
            "XAI_API_KEY", "DB_HOST", "DB_USER", "DB_PASSWORD", 
            "DB_NAME", "TELEGRAM_BOT_TOKEN", "TELEGRAM_CHANNEL_ID"
        ]

        missing_vars = [var for var in required_vars if not os.getenv(var)]
        if missing_vars:
            raise ValueError(f"Missing environment variables: {', '.join(missing_vars)}")

    def get_database_config(self) -> DatabaseConfig:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        return DatabaseConfig(
            host=os.getenv("DB_HOST"),
            user=os.getenv("DB_USER"),
            password=os.getenv("DB_PASSWORD"),
            database=os.getenv("DB_NAME"),
            port=int(os.getenv("DB_PORT", "3306"))
        )

    def get_telegram_config(self) -> TelegramConfig:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram."""
        return TelegramConfig(
            bot_token=os.getenv("TELEGRAM_BOT_TOKEN"),
            channel_id=os.getenv("TELEGRAM_CHANNEL_ID")
        )

    def get_grok_config(self) -> GrokConfig:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Grok API."""
        return GrokConfig(
            api_key=os.getenv("XAI_API_KEY"),
            model_name=os.getenv("GROK_MODEL", "grok-3"),
            base_url=os.getenv("GROK_BASE_URL", "https://api.x.ai/v1"),
            use_web_search=os.getenv("GROK_USE_WEB_SEARCH", "true").lower() == "true",
            temperature=float(os.getenv("GROK_TEMPERATURE", "0.1")),
            max_tokens=int(os.getenv("GROK_MAX_TOKENS", "10000"))
        )

    def get_app_config(self) -> AppConfig:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        return AppConfig(
            tweet_fetch_hours=int(os.getenv("TWEET_FETCH_HOURS", "8")),
            tweet_limit=int(os.getenv("TWEET_LIMIT", "100")),
            min_tweets_threshold=int(os.getenv("MIN_TWEETS_THRESHOLD", "50")),
            log_level=os.getenv("LOG_LEVEL", "INFO"),
            log_file=os.getenv("LOG_FILE", "logs/crypto_analyzer.log")
        )
'''

    def get_database_init(self):
        return '''"""–ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""

# TODO: –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
# from .database_manager import DatabaseManager
# from .models import Tweet, TweetAnalysis, TweetType, AnalysisStats

__all__ = []
'''

    def get_models(self):
        return '''"""
–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Crypto News Analyzer.
"""

from dataclasses import dataclass
from enum import Enum
from typing import Optional
from datetime import datetime


class TweetType(Enum):
    """–¢–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–≤–∏—Ç–æ–≤."""
    TRUE_NEWS = "trueNews"
    FAKE_NEWS = "fakeNews"
    INSIDE = "inside"
    TUTORIAL = "tutorial"
    ANALYTICS = "analitics"
    TRADING = "trading"
    OTHERS = "others"
    SPAM = "isSpam"
    FLOOD = "isFlood"
    ALREADY_POSTED = "alreadyPosted"


@dataclass
class Tweet:
    """–ú–æ–¥–µ–ª—å —Ç–≤–∏—Ç–∞."""
    id: int
    url: str
    text: str
    created_at: Optional[datetime] = None
    is_grok_processed: Optional[bool] = None

    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö."""
        if not self.url:
            raise ValueError("Tweet URL cannot be empty")
        if not self.text:
            raise ValueError("Tweet text cannot be empty")


@dataclass
class TweetAnalysis:
    """–ú–æ–¥–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–≤–∏—Ç–∞."""
    type: str
    title: str
    description: str

    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö."""
        valid_types = [t.value for t in TweetType]
        if self.type not in valid_types:
            raise ValueError(f"Invalid tweet type: {self.type}")

    @property
    def is_valuable(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞."""
        non_valuable = [TweetType.SPAM.value, TweetType.FLOOD.value, TweetType.ALREADY_POSTED.value]
        return self.type not in non_valuable and self.title and self.description


@dataclass
class AnalysisStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞."""
    total_tweets: int
    processed_tweets: int
    valuable_tweets: int
    spam_tweets: int
    flood_tweets: int
    duplicate_tweets: int
    error_count: int
    processing_time: float

    @property
    def success_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤."""
        if self.total_tweets == 0:
            return 0.0
        return (self.processed_tweets / self.total_tweets) * 100
'''

    def get_database_manager(self):
        return '''"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Crypto News Analyzer.
"""

from typing import List, Tuple
from contextlib import contextmanager
from datetime import datetime
import mysql.connector
from mysql.connector import Error as MySQLError


class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""

    def __init__(self, config) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        self.config = config

    @contextmanager
    def _get_connection(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î."""
        connection = None
        try:
            connection = mysql.connector.connect(
                host=self.config.host,
                user=self.config.user,
                password=self.config.password,
                database=self.config.database,
                port=self.config.port,
                autocommit=False,
                use_unicode=True,
                charset='utf8mb4'
            )
            yield connection
        except MySQLError as e:
            print(f"Database connection error: {e}")
            raise Exception(f"Failed to connect to database: {e}")
        finally:
            if connection and connection.is_connected():
                connection.close()

    def get_recent_tweets(self, hours: int = 8, limit: int = 100) -> Tuple[List, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ç–≤–∏—Ç–æ–≤."""
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
        print(f"Getting recent tweets for {hours} hours, limit {limit}")
        return [], 0

    def save_analysis_results(self, tweets: List, results: List) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞."""
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
        print(f"Saving {len(results)} analysis results")

    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î."""
        try:
            with self._get_connection() as connection:
                cursor = connection.cursor()
                cursor.execute("SELECT 1")
                result = cursor.fetchone()
                cursor.close()
                return result[0] == 1
        except Exception as e:
            print(f"Connection test failed: {e}")
            return False
'''

    def get_analyzer_init(self):
        return '''"""–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ —Å –ø–æ–º–æ—â—å—é Grok API."""

# TODO: –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è grok_analyzer.py
# from .grok_analyzer import GrokAnalyzer

__all__ = []
'''

    def get_grok_analyzer(self):
        return '''"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–≤–∏—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Grok API.
"""

import json
from typing import List, Dict, Optional
from openai import OpenAI


class GrokAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–≤–∏—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Grok API."""

    def __init__(self, config) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ Grok."""
        self.config = config
        self.client = OpenAI(
            api_key=config.api_key,
            base_url=config.base_url
        )
        self.system_prompt = self._get_system_prompt()

    def _get_system_prompt(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞."""
        prompt = """
Role: You are a crypto market analyst.

Task: Analyze tweets and provide structured information in Russian.

INPUT: JSON array of tweets
OUTPUT: JSON array with "type", "title", "description" fields

CRITICAL: Always return valid JSON array only.
"""
        return {"role": "system", "content": prompt}

    def analyze_tweets(self, tweets: List, use_web_search: Optional[bool] = None) -> List:
        """–ê–Ω–∞–ª–∏–∑ —Ç–≤–∏—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é Grok API."""
        if not tweets:
            return []

        print(f"Analyzing {len(tweets)} tweets with Grok API")

        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞
        results = []
        for tweet in tweets:
            results.append({
                "type": "others",
                "title": "–¢–µ—Å—Ç",
                "description": "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
            })

        return results

    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Grok API."""
        try:
            print("Testing Grok API connection...")
            # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            return True
        except Exception as e:
            print(f"API connection test failed: {e}")
            return False
'''

    def get_publisher_init(self):
        return '''"""–ú–æ–¥—É–ª—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram."""

# TODO: –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è telegram_publisher.py
# from .telegram_publisher import TelegramPublisher

__all__ = []
'''

    def get_telegram_publisher(self):
        return '''"""
–ü—É–±–ª–∏–∫–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ Telegram.
"""

import asyncio
from typing import List, Dict
import telegram
from telegram.error import TelegramError


class TelegramPublisher:
    """–ü—É–±–ª–∏–∫–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Telegram."""

    MAX_MESSAGE_LENGTH = 4096

    def __init__(self, config) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞ Telegram."""
        self.config = config
        self.bot = telegram.Bot(token=config.bot_token)
        self.emojis = self._get_emoji_mapping()

    def _get_emoji_mapping(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ —ç–º–æ–¥–∑–∏."""
        return {
            "–ù–æ–≤–æ—Å—Ç–∏": "üì¢",
            "–±–∏—Ç–∫–æ–∏–Ω": "‚Çø",
            "bitcoin": "‚Çø",
            "ethereum": "Œû",
        }

    def _escape_markdown_v2(self, text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown V2."""
        reserved_chars = r'_*[]()~`>#-+=|{.}!'
        for char in reserved_chars:
            text = text.replace(char, f'\\\\{char}')
        return text

    async def publish_analysis(self, tweets: List, results: List) -> None:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ Telegram."""
        print(f"Publishing analysis of {len(tweets)} tweets to Telegram")
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é

    async def send_test_message(self) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        try:
            test_message = "*–¢–µ—Å—Ç –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞* üß™\\\\n–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç\\!"

            await self.bot.send_message(
                chat_id=self.config.channel_id,
                text=test_message,
                parse_mode="MarkdownV2"
            )

            print("Test message sent successfully")
            return True

        except Exception as e:
            print(f"Failed to send test message: {e}")
            return False
'''

    def get_utils_init(self):
        return '''"""–£—Ç–∏–ª–∏—Ç—ã –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏."""

# TODO: –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
# from .exceptions import (
#     CryptoAnalyzerError,
#     ConfigError,
#     DatabaseError,
#     GrokAPIError,
#     TelegramError
# )
# from .logger import setup_logger, get_logger

__all__ = []
'''

    def get_exceptions(self):
        return '''"""
–ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è Crypto News Analyzer.
"""


class CryptoAnalyzerError(Exception):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞."""
    pass


class ConfigError(CryptoAnalyzerError):
    """–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    pass


class DatabaseError(CryptoAnalyzerError):
    """–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    pass


class GrokAPIError(CryptoAnalyzerError):
    """–û—à–∏–±–∫–∞ API Grok."""
    pass


class TelegramError(CryptoAnalyzerError):
    """–û—à–∏–±–∫–∞ Telegram API."""
    pass


class ValidationError(CryptoAnalyzerError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö."""
    pass


class ProcessingError(CryptoAnalyzerError):
    """–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
    pass
'''

    def get_logger(self):
        return '''"""
–£—Ç–∏–ª–∏—Ç—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Crypto News Analyzer.
"""

import logging
import logging.handlers
import sys
from pathlib import Path
from typing import Optional


def setup_logger(
    name: str,
    log_file: Optional[str] = None,
    log_level: str = "INFO",
    max_bytes: int = 10 * 1024 * 1024,
    backup_count: int = 5
) -> logging.Logger:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤."""
    logger = logging.getLogger(name)
    logger.handlers.clear()
    logger.setLevel(getattr(logging, log_level.upper()))

    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s'
    )

    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)

    if log_file:
        log_path = Path(log_file)
        log_path.parent.mkdir(parents=True, exist_ok=True)

        file_handler = logging.handlers.RotatingFileHandler(
            log_file,
            maxBytes=max_bytes,
            backupCount=backup_count,
            encoding='utf-8'
        )
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)

    return logger


def get_logger(name: str) -> logging.Logger:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏."""
    return logging.getLogger(name)
'''

    def get_test_config(self):
        return '''"""–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""

import unittest
from unittest.mock import patch

# TODO: –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è
# from src.config.config_manager import ConfigManager


class TestConfigManager(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""

    def test_placeholder(self):
        """–¢–µ—Å—Ç-–∑–∞–≥–ª—É—à–∫–∞."""
        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        self.assertTrue(True)


if __name__ == '__main__':
    unittest.main()
'''

    def get_test_database(self):
        return '''"""–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""

import unittest
from unittest.mock import Mock, patch

# TODO: –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π
# from src.database.database_manager import DatabaseManager


class TestDatabaseManager(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""

    def test_placeholder(self):
        """–¢–µ—Å—Ç-–∑–∞–≥–ª—É—à–∫–∞."""
        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        self.assertTrue(True)


if __name__ == '__main__':
    unittest.main()
'''

    def get_test_analyzer(self):
        return '''"""–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏–∑–∞ Grok."""

import unittest
from unittest.mock import Mock, patch

# TODO: –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π
# from src.analyzer.grok_analyzer import GrokAnalyzer


class TestGrokAnalyzer(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ Grok."""

    def test_placeholder(self):
        """–¢–µ—Å—Ç-–∑–∞–≥–ª—É—à–∫–∞."""
        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        self.assertTrue(True)


if __name__ == '__main__':
    unittest.main()
'''

    def get_test_publisher(self):
        return '''"""–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram."""

import unittest
from unittest.mock import Mock, AsyncMock

# TODO: –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π
# from src.publisher.telegram_publisher import TelegramPublisher


class TestTelegramPublisher(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞ Telegram."""

    def test_placeholder(self):
        """–¢–µ—Å—Ç-–∑–∞–≥–ª—É—à–∫–∞."""
        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        self.assertTrue(True)


if __name__ == '__main__':
    unittest.main()
'''

    def get_monitoring(self):
        return '''"""–°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã."""

import sys
import os
import asyncio
from datetime import datetime
from typing import Dict, Any

sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))


class SystemMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞."""
        print("Initializing system monitor...")

    def get_system_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
        return {
            "timestamp": datetime.now().isoformat(),
            "overall_status": "healthy",
            "components": {
                "database": {"status": "healthy"},
                "grok_api": {"status": "healthy"},
                "telegram": {"status": "healthy"}
            }
        }


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    monitor = SystemMonitor()
    health = monitor.get_system_health()
    print(f"System Status: {health['overall_status']}")
    return 0


if __name__ == "__main__":
    sys.exit(asyncio.run(main()))
'''

    def get_setup_database(self):
        return '''"""–°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""

import sys
import mysql.connector
from mysql.connector import Error as MySQLError


def create_database_and_user():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        root_password = input("Enter MySQL root password: ")

        connection = mysql.connector.connect(
            host='localhost',
            port=3306,
            user='root',
            password=root_password
        )

        cursor = connection.cursor()

        print("Creating database...")
        cursor.execute("""
            CREATE DATABASE IF NOT EXISTS crypto_analyzer 
            CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)

        print("Creating user...")
        cursor.execute("""
            CREATE USER IF NOT EXISTS 'crypto_user'@'%' 
            IDENTIFIED BY 'secure_password'
        """)

        print("Granting privileges...")
        cursor.execute("""
            GRANT ALL PRIVILEGES ON crypto_analyzer.* 
            TO 'crypto_user'@'%'
        """)

        cursor.execute("FLUSH PRIVILEGES")
        print("‚úÖ Database setup completed!")

        cursor.close()
        connection.close()
        return True

    except MySQLError as e:
        print(f"‚ùå MySQL error: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("=== Database Setup ===")
    success = create_database_and_user()
    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())
'''

    def get_run_tests(self):
        return '''"""–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."""

import sys
import os
import subprocess
from pathlib import Path


def run_command(command: list, description: str) -> bool:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã."""
    print(f"\\n=== {description} ===")
    try:
        result = subprocess.run(command, check=True, capture_output=True, text=True)
        print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed: {e}")
        return False
    except FileNotFoundError:
        print(f"‚ùå Command not found: {command[0]}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."""
    project_root = Path(__file__).parent.parent
    os.chdir(project_root)

    print("üß™ Running Tests")

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    success = run_command(
        ["python", "-m", "pytest", "tests/", "-v"],
        "Unit Tests"
    )

    if success:
        print("‚úÖ All tests passed!")
        return 0
    else:
        print("‚ö†Ô∏è Some tests failed or pytest not installed")
        return 0


if __name__ == "__main__":
    sys.exit(main())
'''

    def get_env_example(self):
        return '''# API –∫–ª—é—á–∏ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!)
XAI_API_KEY=your_xai_api_key_here
TELEGRAM_BOT_TOKEN=your_telegram_bot_token
TELEGRAM_CHANNEL_ID=your_channel_id

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!)
DB_HOST=localhost
DB_PORT=3306
DB_USER=crypto_user
DB_PASSWORD=secure_password
DB_NAME=crypto_analyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Grok API
GROK_MODEL=grok-3
GROK_BASE_URL=https://api.x.ai/v1
GROK_USE_WEB_SEARCH=true
GROK_TEMPERATURE=0.1
GROK_MAX_TOKENS=10000

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
TWEET_FETCH_HOURS=8
TWEET_LIMIT=100
MIN_TWEETS_THRESHOLD=50

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL=INFO
LOG_FILE=logs/crypto_analyzer.log
'''

    def get_gitignore(self):
        return '''# Python
__pycache__/
*.py[cod]
*$py.class
*.so
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Testing
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Project specific
*.log
logs/
backup*.sql
profile_stats
'''

    def get_requirements(self):
        return '''mysql-connector-python>=8.2.0
python-dotenv>=1.0.0
openai>=1.12.0
python-telegram-bot>=20.7
typing-extensions>=4.8.0
'''

    def get_requirements_dev(self):
        return '''pytest>=7.4.0
pytest-asyncio>=0.21.0
pytest-cov>=4.1.0
black>=23.0.0
flake8>=6.0.0
mypy>=1.5.0
pre-commit>=3.3.0
'''

    def get_dockerfile(self):
        return '''FROM python:3.11-slim

RUN apt-get update && apt-get install -y \\
    gcc \\
    default-libmysqlclient-dev \\
    pkg-config \\
    && rm -rf /var/lib/apt/lists/*

RUN groupadd -r crypto && useradd -r -g crypto crypto

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY src/ ./src/
COPY config/ ./config/

RUN mkdir -p logs && chown -R crypto:crypto logs

USER crypto

CMD ["python", "-m", "src.main"]
'''

    def get_docker_compose(self):
        return '''version: '3.8'

services:
  crypto-analyzer:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: crypto_news_analyzer
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped

  mysql:
    image: mysql:8.0
    container_name: crypto_mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

volumes:
  mysql_data:
'''

    def get_init_sql(self):
        return '''-- –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        CREATE \
        DATABASE IF NOT EXISTS crypto_analyzer 
CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

USE \
        crypto_analyzer;

-- –¢–∞–±–ª–∏—Ü–∞ —Ç–≤–∏—Ç–æ–≤
        CREATE TABLE IF NOT EXISTS tweets \
        ( \
            id \
            INT \
            AUTO_INCREMENT \
            PRIMARY \
            KEY, \
            url \
            VARCHAR \
        ( \
            500 \
        ) NOT NULL UNIQUE,
            tweet_text TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            isGrok BOOLEAN DEFAULT NULL, \
            INDEX idx_created_at \
        ( \
            created_at \
        ),
            INDEX idx_is_grok \
        ( \
            isGrok \
        ),
            INDEX idx_created_grok \
        ( \
            created_at, \
            isGrok \
        )
            ) ENGINE=InnoDB CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- –¢–∞–±–ª–∏—Ü–∞ –∞–Ω–∞–ª–∏–∑–∞
        CREATE TABLE IF NOT EXISTS tweet_analysis \
        ( \
            id \
            INT \
            AUTO_INCREMENT \
            PRIMARY \
            KEY, \
            url \
            VARCHAR \
        ( \
            500 \
        ) NOT NULL,
            type VARCHAR \
        ( \
            50 \
        ) NOT NULL,
            title VARCHAR \
        ( \
            200 \
        ) DEFAULT '',
            description TEXT DEFAULT '',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, \
            INDEX idx_created_at \
        ( \
            created_at \
        ),
            INDEX idx_type \
        ( \
            type \
        ),
            INDEX idx_url \
        ( \
            url \
        ),
            INDEX idx_created_type \
        ( \
            created_at, \
            type \
        )
            ) ENGINE=InnoDB CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; \
               '''

    def get_setup_py(self):
        return '''"""Setup script for Crypto News Analyzer."""

from setuptools import setup, find_packages

with open("README.md", "r", encoding="utf-8") as fh:
    long_description = fh.read()

setup(
    name="crypto-news-analyzer",
    version="1.0.0",
    author="Your Name",
    author_email="your.email@example.com",
    description="Automated crypto news analysis with Grok AI",
    long_description=long_description,
    long_description_content_type="text/markdown",
    packages=find_packages(),
    classifiers=[
        "Development Status :: 4 - Beta",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
    ],
    python_requires=">=3.9",
    install_requires=[
        "mysql-connector-python>=8.2.0",
        "python-dotenv>=1.0.0",
        "openai>=1.12.0",
        "python-telegram-bot>=20.7",
        "typing-extensions>=4.8.0",
    ],
)
'''

    def get_pyproject_toml(self):
        return '''[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "crypto-news-analyzer"
version = "1.0.0"
description = "Automated crypto news analysis with Grok AI"
requires-python = ">=3.9"

[tool.black]
line-length = 100
target-version = ['py39']

[tool.mypy]
python_version = "3.9"
warn_return_any = true
'''

    def get_precommit(self):
        return '''repos:
  - repo: https://github.com/psf/black
    rev: 23.3.0
    hooks:
      - id: black

  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=100]
'''

    def get_readme(self):
        return '''# Crypto News Analyzer

–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Grok AI.

## üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å Grok 3 API
- –í–µ–±-–ø–æ–∏—Å–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
- Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è

## üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è

- Python 3.9+
- MySQL 8.0+
- API –∫–ª—é—á xAI Grok
- Telegram Bot Token

## ‚ö° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

```bash
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
pip install -r requirements.txt

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
cp config/.env.example .env
# –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î
python scripts/setup_database.py

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
python -m src.main --test

# –ó–∞–ø—É—Å–∫
python -m src.main
```

## üê≥ Docker

```bash
cp config/.env.example .env
docker-compose -f docker/docker-compose.yml up -d
```

## üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

- [–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é](docs/DEPLOYMENT.md)
- [API Reference](docs/API_REFERENCE.md)

## ü§ù –í–∫–ª–∞–¥ –≤ –ø—Ä–æ–µ–∫—Ç

1. Fork —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
2. –°–æ–∑–¥–∞–π—Ç–µ feature branch
3. –í–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å —Ç–µ—Å—Ç–∞–º–∏
4. –°–æ–∑–¥–∞–π—Ç–µ Pull Request

## üìÑ –õ–∏—Ü–µ–Ω–∑–∏—è

MIT License
'''

    def get_deployment_doc(self):
        return '''# –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é

## –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

- Python 3.9+
- MySQL 8.0+
- API –∫–ª—é—á–∏ xAI –∏ Telegram

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞

### 1. –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
```bash
pip install -r requirements.txt
```

### 2. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
```bash
cp config/.env.example .env
# –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env
```

### 3. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
```bash
python scripts/setup_database.py
```

### 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
```bash
python -m src.main --test
```

### 5. –ó–∞–ø—É—Å–∫
```bash
python -m src.main
```

## Docker —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ

```bash
docker-compose -f docker/docker-compose.yml up -d
```

## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

```bash
python scripts/monitoring.py
```
'''

    def get_api_reference(self):
        return '''# API Reference

## –ú–æ–¥—É–ª–∏

### ConfigManager
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

### DatabaseManager  
–†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö MySQL

### GrokAnalyzer
–ê–Ω–∞–ª–∏–∑ —Ç–≤–∏—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é Grok API

### TelegramPublisher
–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Telegram

## –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö

### Tweet
–ú–æ–¥–µ–ª—å —Ç–≤–∏—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

### TweetAnalysis
–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–≤–∏—Ç–∞

## –ò—Å–∫–ª—é—á–µ–Ω–∏—è

### CryptoAnalyzerError
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –∏—Å–∫–ª—é—á–µ–Ω–∏–π

### ConfigError, DatabaseError, GrokAPIError, TelegramError
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
'''

    def get_project_structure(self):
        return '''# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

```
crypto-news-analyzer/
‚îú‚îÄ‚îÄ src/                    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
‚îÇ   ‚îú‚îÄ‚îÄ config/            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚îÇ   ‚îú‚îÄ‚îÄ database/          # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
‚îÇ   ‚îú‚îÄ‚îÄ analyzer/          # Grok –∞–Ω–∞–ª–∏–∑
‚îÇ   ‚îú‚îÄ‚îÄ publisher/         # Telegram
‚îÇ   ‚îú‚îÄ‚îÄ utils/             # –£—Ç–∏–ª–∏—Ç—ã
‚îÇ   ‚îî‚îÄ‚îÄ main.py           # –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª
‚îú‚îÄ‚îÄ tests/                 # –¢–µ—Å—Ç—ã
‚îú‚îÄ‚îÄ scripts/               # –°–∫—Ä–∏–ø—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚îú‚îÄ‚îÄ docker/                # Docker —Ñ–∞–π–ª—ã
‚îú‚îÄ‚îÄ config/                # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚îú‚îÄ‚îÄ docs/                  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
‚îî‚îÄ‚îÄ logs/                  # –õ–æ–≥–∏
```

## –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤

‚úÖ **–ì–æ—Ç–æ–≤—ã–µ**: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
üîß **–ó–∞–≥–æ—Ç–æ–≤–∫–∏**: –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ —Å TODO

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å .env —Ñ–∞–π–ª
3. –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–¥—É–ª–∏ —Å TODO
4. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
'''

    def get_pycharm_misc(self):
        return '''<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11" project-jdk-type="Python SDK" />
</project>
'''

    def get_pycharm_modules(self):
        return '''<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/.idea/crypto-news-analyzer.iml" filepath="$PROJECT_DIR$/.idea/crypto-news-analyzer.iml" />
    </modules>
  </component>
</project>
'''

    def get_pycharm_iml(self):
        return '''<?xml version="1.0" encoding="UTF-8"?>
<module type="PYTHON_MODULE" version="4">
  <component name="NewModuleRootManager">
    <content url="file://$MODULE_DIR$">
      <sourceRoot url="file://$MODULE_DIR$/src" />
      <excludeFolder url="file://$MODULE_DIR$/venv" />
      <excludeFolder url="file://$MODULE_DIR$/logs" />
      <excludeFolder url="file://$MODULE_DIR$/.pytest_cache" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
  </component>
</module>
'''


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üèóÔ∏è  Crypto News Analyzer - Structure Setup for PyCharm")
    print("=" * 60)

    current_path = Path.cwd()

    if any(current_path.iterdir()):
        print(f"‚ö†Ô∏è  –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª—ã:")
        for item in list(current_path.iterdir())[:5]:
            print(f"   {item.name}")
        if len(list(current_path.iterdir())) > 5:
            print(f"   ... –∏ –µ—â–µ {len(list(current_path.iterdir())) - 5} —Ñ–∞–π–ª–æ–≤")

        response = input(f"\n‚ùì –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —ç—Ç–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏? (y/N): ")
        if response.lower() != 'y':
            print("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return

    setup = ProjectStructureSetup()
    setup.create_project_structure()


if __name__ == "__main__":
    main()