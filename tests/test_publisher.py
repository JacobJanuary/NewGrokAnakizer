"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram.
"""

import unittest
from unittest.mock import Mock, patch, AsyncMock
import pytest

from src.publisher.telegram_publisher import TelegramPublisher
from src.config.config_manager import TelegramConfig
from src.database.models import Tweet, TweetAnalysis
from src.utils.exceptions import TelegramError as CustomTelegramError


class TestTelegramPublisher(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞ Telegram."""

    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤."""
        self.telegram_config = TelegramConfig(
            bot_token="test_token",
            channel_id="test_channel"
        )
        self.publisher = TelegramPublisher(self.telegram_config)

    def test_escape_markdown_v2(self):
        """–¢–µ—Å—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown V2."""
        test_cases = [
            ("Test_text", "Test\\_text"),
            ("Text*with*stars", "Text\\*with\\*stars"),
            ("Text[with]brackets", "Text\\[with\\]brackets"),
            ("Text(with)parens", "Text\\(with\\)parens"),
            ("Normal text", "Normal text")
        ]

        for input_text, expected in test_cases:
            with self.subTest(input_text=input_text):
                result = self.publisher._escape_markdown_v2(input_text)
                self.assertEqual(result, expected)

    def test_get_emoji_for_content(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
        test_cases = [
            ("bitcoin —Ä–æ—Å—Ç", "BTC —Ä–∞—Å—Ç–µ—Ç —Å–µ–≥–æ–¥–Ω—è", "üì¢", "‚Çø"),
            ("ethereum –ø–∞–¥–µ–Ω–∏–µ", "ETH —Å–Ω–∏–∂–∞–µ—Ç—Å—è", "üì¢", "Œû"),
            ("–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞", "üì¢", "‚ú®"),
            ("–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç", "–ü—Ä–æ—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", "üì¢", "üì¢")
        ]

        for title, description, default_emoji, expected in test_cases:
            with self.subTest(title=title):
                result = self.publisher._get_emoji_for_content(title, description, default_emoji)
                self.assertEqual(result, expected)

    def test_filter_valuable_tweets(self):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ü–µ–Ω–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤."""
        tweets = [
            Tweet(id=1, url="https://twitter.com/test1", text="News tweet"),
            Tweet(id=2, url="https://twitter.com/test2", text="Spam tweet"),
            Tweet(id=3, url="https://twitter.com/test3", text="Analysis tweet")
        ]

        results = [
            TweetAnalysis(type="trueNews", title="–ù–æ–≤–æ—Å—Ç—å", description="–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"),
            TweetAnalysis(type="isSpam", title="", description=""),
            TweetAnalysis(type="analitics", title="–ê–Ω–∞–ª–∏–∑", description="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
        ]

        valuable_items = self.publisher._filter_valuable_tweets(tweets, results)

        self.assertEqual(len(valuable_items), 2)  # –¢–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç—å –∏ –∞–Ω–∞–ª–∏–∑
        self.assertEqual(valuable_items[0][1].type, "trueNews")
        self.assertEqual(valuable_items[1][1].type, "analitics")

    def test_split_into_messages_single_message(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        content = [
            "*–ö—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑ —Ç–≤–∏—Ç–æ–≤* üåü\n",
            "*üì∞ –ù–æ–≤–æ—Å—Ç–∏*\n",
            "*–ù–æ–≤–æ—Å—Ç—å BTC ‚Çø*\nBitcoin –≤—ã—Ä–æ—Å –Ω–∞ 5%. –†—ã–Ω–æ–∫ —Ä–∞–¥—É–µ—Ç—Å—è.\n[–ò—Å—Ç–æ—á–Ω–∏–∫](https://twitter.com/test)\n",
            "\n"
        ]

        messages = self.publisher._split_into_messages(content)

        self.assertEqual(len(messages), 1)
        self.assertIn("–ö—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑ —Ç–≤–∏—Ç–æ–≤", messages[0])
        self.assertIn("–ù–æ–≤–æ—Å—Ç—å BTC", messages[0])

    @pytest.mark.asyncio
    async def test_send_test_message_success(self):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        # –ú–æ–∫–∞–µ–º –±–æ—Ç–∞
        self.publisher.bot = AsyncMock()
        self.publisher.bot.send_message = AsyncMock()

        result = await self.publisher.send_test_message()

        self.assertTrue(result)
        self.publisher.bot.send_message.assert_called_once()

    @pytest.mark.asyncio
    async def test_send_test_message_failure(self):
        """–¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        # –ú–æ–∫–∞–µ–º –±–æ—Ç–∞ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º
        self.publisher.bot = AsyncMock()
        self.publisher.bot.send_message = AsyncMock(side_effect=Exception("Send failed"))

        result = await self.publisher.send_test_message()

        self.assertFalse(result)


if __name__ == '__main__':
    unittest.main()